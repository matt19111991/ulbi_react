.Modal {
  align-items: center;
  display: flex;

  /* выставляем '0' сразу для 'top', 'right', 'bottom', 'left' и заполняем все доступное пространство родителя */
  inset: 0;
  justify-content: center;
  opacity: 0;
  pointer-events: none;
  position: fixed;
  z-index: var(--overlay-z-index);
}

.content {
  border-radius: 12px;
  max-width: 60%;
  padding: 20px;
  transition: .3s transform; /* переход при закрытии модального окна */
  z-index: var(--modal-z-index);
}

.modalNew {
  .content {
    background-color: var(--light-bg-redesigned);
    color: var(--text-redesigned);
  }
}

.modalOld {
  .content {
    background-color: var(--bg-color);
    color: var(--primary-color);
  }
}

/*
  @keyframes [название_анимации] {
    [from | проценты] { ...стили }
    [to   | проценты] { ...стили }
  }
*/
@keyframes appear {
  0% {
    transform: scale(.5);
  }

  100% {
    transform: scale(1);
  }
}

/*
  здесь делаем открытие модального окна через 'animation', а не через 'transition', т.к.:
    - можем лениво подгружать 'children' и редюсеры =>
        для 'transition' нет информации: с какого на какое состояние переходить (изначально компонент будет 'null'):
          if (lazy && !isMounted) {
            return null;
          }

    - используем 'Portal' => могут быть проблемы с фокусом при попытках адаптации 'transition' для
      только что загруженного ленивого компонента и повторно открываемого загруженного ленивого компонента
*/
.opened {
  opacity: 1;
  pointer-events: auto;
  z-index: var(--modal-z-index);

  .content {
    /* animation: [название_анимации] [продолжительность] [функция_для_анимации] */
    animation: appear .3s ease-in;
  }
}

/*
  класс для анимации закрытия модального окна. должен быть в самом конце файла,
  иначе свойство 'transform' перепишется и не будет анимации на закрытие окна
*/
.isClosing {
  .content {
    transform: scale(0);
  }
}

@media screen and (max-width: 840px) {
  .content {
    max-width: 100%;
  }
}
