import { useEffect } from 'react';
import { toast } from 'react-hot-toast';

import { USER_LOCALSTORAGE_KEY } from '@/shared/const/localstorage';

const SUBSCRIBE_ENDPOINT = 'subscribe';

const getNotificationPermissionsIcon = (permission: NotificationPermission): string => {
  switch (permission) {
    case 'denied':
      return 'üîí';

    case 'granted':
      return 'üîë';

    case 'default':
      return 'üîí';

    default:
      return 'üîí';
  }
};

/**
 * –•—É–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å –≤–æ—Ä–∫–µ—Ä–∞
 */
export const useServiceWorker = () => {
  useEffect(() => {
    (async () => {
      if ('serviceWorker' in navigator) {
        // –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä–æ–≤
        const registrations = await navigator.serviceWorker.getRegistrations();

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä—ã
        for (const registration of registrations) {
          const registeredUrl = registration.active?.scriptURL;

          const urlToRegister = `${window.location.href}service-worker.js`;

          // –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          if (registeredUrl === urlToRegister) {
            await registration.unregister(); // –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –Ω–µ–≥–æ
          }
        }

        toast(`Notification permissions: ${Notification.permission}`, {
          icon: getNotificationPermissionsIcon(Notification.permission),
          position: 'bottom-center',
        });

        // –µ—Å–ª–∏ 'push' —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if (Notification.permission !== 'granted') {
          // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await Notification.requestPermission();
        }

        // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä
        const registration = await navigator.serviceWorker.register('/service-worker.js');

        /*
          –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞, –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å-–≤–æ—Ä–∫–µ—Ä,
          —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "Failed to execute 'subscribe' on 'PushManager':
          Subscription failed - no active Service Worker"
        */
        await navigator.serviceWorker.ready;

        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 'push' —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try {
          const subscription = await registration.pushManager.subscribe({
            applicationServerKey: __VAPID_KEY__, // 'VAPID' –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á

            // –±–µ–∑ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ 'Chrome' –∏ 'Edge'
            userVisibleOnly: true,
          });

          const token = localStorage.getItem(USER_LOCALSTORAGE_KEY) || '';

          /*
            –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞,
            –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          */
          if (token) {
            await fetch(`${__API__}${SUBSCRIBE_ENDPOINT}`, {
              body: JSON.stringify({
                subscription,
                token,
                userAgent: navigator.userAgent,
              }),
              headers: {
                Authorization: token,
                'Content-Type': 'application/json',
              },
              method: 'POST',
            });
          }
        } catch (e) {
          const message = e instanceof Error ? e.message : 'Unexpected error';

          toast(message, {
            style: { lineHeight: '24px' },
          });
        }
      } else {
        console.log("Current browser doesn't support service workers");
      }
    })();
  }, []);
};
