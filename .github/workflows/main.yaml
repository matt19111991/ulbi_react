name: Linting, Testing, Building

# запуск GitHub actions будет происходить на push и pull request (ветка 'master')
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  id-token: write
  pages: write

concurrency:
  cancel-in-progress: true
  group: "pages"

jobs: # 'build-and-ui-testing' и 'checks' jobs запускаются параллельно
  build-and-ui-testing: # требует сборку
    runs-on: ubuntu-latest

    concurrency: ci-${{ github.ref }}

    timeout-minutes: 30

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    strategy:
      matrix:
        node-version: [ 17.x ] # задаем версию для Node.js

    steps:
      - uses: actions/checkout@v2

      # устанавливаем в среду, где будут запускаться GitHub Actions, заданную выше версию Node.js
      - name: Starting Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # даем добро на установку peer-dependencies
      # - name: Set legacy-peer-deps
        # run: npm config set legacy-peer-deps true

      # устанавливаем node_modules
      - name: Install modules
        # есть аналог 'npm install' => 'npm ci' (более быстрая версия для CI):
          # не создается новый 'package-lock.json' файл, а используется существующий
          # нужно добавить 'package-lock.json' в репозиторий
          # но, используем 'npm i', т.к. иначе возникают конфликты для deprecated библиотек
        run: npm i

      # собираем production build
      - name: Build production project
        # запуск команды в любом случае (даже если завалилось выполнение предыдущей команды)
        if: always()
        run: npm run build:prod

      # собираем storybook build
      - name: Build storybook
        if: always()
        run: npm run storybook:build

      # запускаем скриншотное тестирование (loki)
      - name: Screenshot testing
        if: always()
        run: npm run test:ui:ci

      # запускаем unit тестирование
      - name: Unit testing
        if: always()
        run: npm run test:unit

      # генерируем отчет по скриншотному тестированию (loki)
      - name: Generate HTML report
        if: always()
        run: npm run test:ui:report

      # перемещаем отчеты loki в папку 'reports'
      - name: Move loki reports
        if: always()
        run: mv .loki reports/

      # извлекаем метаданные
      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v2

      # упаковываем и загружаем артефакты, которые можно развернуть на страницах GitHub
      - name: Upload artifact
        if: always()
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'reports' # все отчеты сохраняются в папку 'reports'

      # публикуем артефакты на страницах GitHub для деплоя
      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v1

  checks: # не требует сборку
    runs-on: ubuntu-latest

    # пока не выполнятся 'build' и 'linting' jobs, текущая 'checks' job не запустится
    # needs: [build, linting]

    strategy:
      matrix:
        node-version: [ 17.x ] # задаем версию для Node.js

    steps:
      - uses: actions/checkout@v2

      # устанавливаем в среду, где будут запускаться GitHub Actions, заданную выше версию Node.js
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # даем добро на установку peer-dependencies
      # - name: Set legacy-peer-deps
        # run: npm config set legacy-peer-deps true

      # устанавливаем node_modules
      - name: Install modules
        # есть аналог 'npm install' => 'npm ci' (более быстрая версия для CI):
          # не создается новый 'package-lock.json' файл, а используется существующий
          # нужно добавить 'package-lock.json' в репозиторий
          # но, используем 'npm i', т.к. иначе возникают конфликты для deprecated библиотек
        run: npm i

      # проверяем корректность TypeScript
      - name: Linting typescript
        if: always()
        run: npm run lint:ts

      # проверяем корректность CSS
      - name: Linting CSS
        run: npm run lint:scss

      # запускаем unit тестирование
      - name: Unit testing
        if: always()
        run: npm run test:unit

  # Секреты задаются на GitHub: Settings => Security => Secrets and variables => Actions

  # HOST = 91.223.169.133
  # USERNAME = root
  # PASSWORD = 942$kis$701KIS

  build:
    name: deploy
    runs-on: ubuntu-latest

    needs:
    - job: build-and-ui-testing
      optional: true

    strategy:
      matrix:
        node-version: [ 17.x ]
    steps:
      - name: Executing remote SSH commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

          # команды, чтобы избежать ошибки 'npm: command not found'
            # export NVM_DIR="$HOME/.nvm"
            # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          script: |
            cd ~/ulbi_react

            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            git pull

            ~/ulbi_react/.deploy/deploy.sh
