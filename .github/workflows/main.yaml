name: Linting, Testing, Building, Deploying

# запуск 'GitHub Actions' будет происходить на 'push' и 'pull request' (ветка 'master')
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# предоставляем разрешения для 'GITHUB_TOKEN', которые необходимы для деплоя
permissions:
  id-token: write # для получения 'OpenID Connect (OIDC) token'
  # Подробнее об OIDC token: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#overview-of-openid-connect

  pages: write # разрешает деплой для 'GitHub Actions'

concurrency:
  cancel-in-progress: true # для возможности отмены любой 'job' в 'concurrency' группе
  group: "pages" # название 'concurrency' группы

jobs: # 'build-and-ui-testing' и 'linting' jobs запускаются параллельно
  build-and-ui-testing: # требует сборку
    runs-on: ubuntu-latest

    timeout-minutes: 30

    # задаем ограничение для деплоя только из 'master' ветки:
      # 'GitHub' => 'Settings' для репозитория => 'Environments' => 'New environment' =>
      # Вводим любое название, например 'github-pages' => 'Configure environment'

      # Переходим в настройки для переменной => в 'Deployment branches and tags' выбираем
      # 'Selected branches and tags' => Добавляем 'master' ветку
    environment:
      name: github-pages

      # url c отчетами отображается в названии 'job' на 'GitHub Actions':
        # build-and-ui-testing (22.x)
        # https://matt19111991.github.io/ulbi_react/
      url: ${{ steps.deployment.outputs.page_url }}

    strategy:
      matrix:
        node-version: [ 23.x ] # задаем версию для 'Node.js'

    steps:
      - uses: actions/checkout@v4 # синхронизация с репозиторием

      # устанавливаем в среду, где будут запускаться 'GitHub Actions', заданную выше версию 'Node.js'
      - name: Starting Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # даем добро на установку 'peer-dependencies'
      # - name: Set legacy-peer-deps
        # run: npm config set legacy-peer-deps true

      # устанавливаем node_modules
      - name: Install modules
        # есть аналог 'npm install' => 'npm ci' (более быстрая версия для CI):
          # не создается новый 'package-lock.json' файл, а используется существующий
          # нужно добавить 'package-lock.json' в репозиторий
          # но, используем 'npm i', т.к. иначе возникают конфликты для 'deprecated' библиотек
        run: npm i --force

      # собираем production build
      - name: Build production project
        # запуск команды в любом случае (даже если завалилось выполнение предыдущей команды)
        if: always()
        run: npm run build:prod

      # собираем storybook build
      - name: Build storybook
        if: always()
        run: npm run storybook:build

      # запускаем скриншотное тестирование (loki)
      - name: Screenshot testing
        if: always()
        run: npm run test:ui:ci

      # запускаем unit тестирование
      - name: Unit testing
        if: always()
        run: npm run test:unit

      # генерируем отчет по скриншотному тестированию (loki)
      - name: Generate HTML report
        if: always()
        run: npm run test:ui:report

      # перемещаем отчеты loki в папку 'reports'
      - name: Move loki reports
        if: always()
        run: mv .loki reports/

      # извлекаем метаданные
      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v5

      # упаковываем и загружаем артефакты, которые можно развернуть на страницах 'GitHub'
      - name: Upload artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'reports' # все отчеты сохраняются в папку 'reports'

      # публикуем артефакты на страницах 'GitHub' для деплоя
      #  обязательно должен быть файл 'reports/index.html', иначе 404 ошибка при переходе на
      # 'https://matt19111991.github.io/ulbi_react'
      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v4

  linting: # не требует сборку
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 23.x ] # задаем версию для 'Node.js'

    steps:
      - uses: actions/checkout@v4 # синхронизация с репозиторием

      # устанавливаем в среду, где будут запускаться 'GitHub Actions', заданную выше версию 'Node.js'
      - name: Starting Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # даем добро на установку peer-dependencies
      # - name: Set legacy-peer-deps
        # run: npm config set legacy-peer-deps true

      # устанавливаем node_modules
      - name: Install modules
        # есть аналог 'npm install' => 'npm ci' (более быстрая версия для CI):
          # не создается новый 'package-lock.json' файл, а используется существующий
          # нужно добавить 'package-lock.json' в репозиторий
          # но, используем 'npm i', т.к. иначе возникают конфликты для 'deprecated' библиотек
        run: npm i --force

      # проверяем корректность TypeScript
      - name: Linting Typescript
        if: always()
        run: npm run lint:ts

      # проверяем корректность CSS
      - name: Linting CSS
        run: npm run lint:scss

  # Секреты задаются на 'GitHub': 'Settings' => 'Security' => 'Secrets and variables' => 'Actions'

  # HOST = 91.223.169.133
  # USERNAME = root
  # PASSWORD = 942$kis$701KIS

  build:
    name: deploy

    runs-on: ubuntu-latest

    # пока не выполнится 'build-and-ui-testing' job, текущая 'build' job не запустится
    needs: [build-and-ui-testing]

    if: ${{ false }} # отключаем, пока нет сервера

    strategy:
      matrix:
        node-version: [ 22.x ] # задаем версию для 'Node.js'

    steps:
      - name: Executing remote SSH commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

          # команды, чтобы избежать ошибки 'npm: command not found'
            # export NVM_DIR="$HOME/.nvm"
            # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          script: |
            cd ~/ulbi_react

            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            git pull

            ~/ulbi_react/.deploy/deploy.sh
