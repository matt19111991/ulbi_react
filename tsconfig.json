{
  "compilerOptions": {
    "allowJs": true, // компилятор будет обрабатывать не только 'TS', но и 'JS' файлы
/*
    если какая-то библиотека не имеет 'default import', то 'ts-loader' или 'babel-loader' создадут их:
    import * as path from 'path'; => import path from 'path';
*/  "allowSyntheticDefaultImports": true,

    "baseUrl": ".", // начальная директория для абсолютных импортов

//  для корректной совместной работы 'document.getElementsByTagName' и 'target': 'ES5' в 'tsconfig.json'
    "downlevelIteration": true,

/* 'esModuleInterop' позволяет работать с пакетами, которые используют 'CommonJS', как с 'ES6' модулями:
    const path = require('path') | module.exports => import path from 'path';
*/  "esModuleInterop": true,

/*  транспиляция каждого '.ts{x}' файла в '.js{x}' будет происходить по отдельности,
    необходимо для корректной работы 'babel-loader',
    позволяет выявить зависимости между файлами и избавиться от них, например:
     - чтобы в бандл не попадали 'enums' или 'namespaces'
     - требуется 'export type' для типов и интерфейсов (чтобы не тащить их в конечную сборку)
*/  "isolatedModules": true,

    "jsx": "react-jsx", // можно избавиться от "import React from 'react';" в каждом файле с 'JSX'

    "noImplicitAny": true, // тип 'any' можно указывать только явно

/*  подключение типизации 'DOM', иначе ошибка: 'Type HTMLCollectionOf<HTMLElement> is not an array type or does not
    have a [Symbol.iterator]() method that returns an iterator.'
*/  "lib": ["DOM", "DOM.Iterable"],

    "module": "ESNext", // система модулей. Чаще всего 'ESNext' или 'ES6'

/*  позволяет избавиться от расширений файлов в импортах:
    "import { add } from './math'" вместо "import { add } from './math.ts'"
*/  "moduleResolution": "node", // 99% случаев => применяем 'node' стратегию

    "outDir": "./dist/", // куда эмитятся файлы после компиляции. Значение неважно, т.к. за это отвечает 'Webpack'

    "paths": {
//    должна быть консистентность с 'Webpack' ('buildWebpackConfig' => 'resolve' => 'alias')
      "@/*": ["./src/*"] // для абсолютных импортов ('@/entities/Article')

     // "*": ["./src/*"] // для абсолютных импортов ('entities/Article')
    },

    // компилятор не будет проверять типы в файлах библиотек с расширением '.d.ts'
    "skipLibCheck": true,

/*  строгий режим (лучше всегда включать)
    Например, при попытке доступа к полю у пустого массива 'data' => 'data.username'
    не будет выброшена ошибка, если 'strict: false';

*/  "strict": true,

//  конечная версия стандарта 'EcmaScript', в которую будет компилироваться код (для улучшения поддержки браузеров)
    "target": "es5",

    "types": [
/*    иначе ошибки в тестах вида: 'Property [toBeInTheDocument | toHaveClass] does not exist on type
      JestMatchers<HTMLElement>'
*/    "@testing-library/jest-dom",

      "node", // для корректной типизации папки 'scripts'
    ],
  },

/* если поле 'include' не указано: 'tsconfig' работает для всех '.ts(x)' файлов
   если указано: нужно перечислить все папки, которые должны проверяться 'TypeScript-ом'
*/"include": [
    "./config/**/*.ts",
    "./config/**/*.tsx",
    "./scripts/**/*.ts",
    "./src/**/*.ts",
    "./src/**/*.tsx",
    "babel.config.ts",
    "vite.config.ts",
    "webpack.config.ts",
  ],

  "exclude": ["node_modules"],

  "ts-node": {
    "compilerOptions": {
      // исправляет 'SyntaxError: Cannot use import statement outside a module' для 'webpack.config.ts'
      "module": "CommonJS",
    },
  },
}
